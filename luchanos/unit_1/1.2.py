'''
1. Написать функцию, которая на вход будет принимать произвольное количество аргументов и возвращать их сумму.
2. В сигнатуре функции объявить 4 обязательных аргумента, но оставить возможность передавать в неё сколько угодно
дополнительных аргументов. Попробуйте вызвать функцию в следующих ситуациях и объясните результат:
- прокинуть в функцию только 1 аргумент
- прокинуть аргументы таким образом, чтобы обязательный аргумент был передан одновременно позиционно и по ключу
- создать кортеж со значениями и распаковать его при вызове функции с помощью *
- создать словарь со значениями и распаковать его при вызове функции с помощью * и **: что наблюдаете? Почему?
'''


# 1
def sum_func(*args):
    return sum(args)


print(sum_func(1, 2, 3, 4, 5, 6, 7, ))


# 2
def sum_func2(a, b, c, d, *args):
    return a + b + c + d + sum(args)


#print(sum_func2(1)) #ошибка, не достает еще 3х аргументов
#print(sum_func2(1, 2, 3, 4, d=5)) #несколько значение для одного аргумента
tup = 1, 2, 3, 4, 5, 6
print('распакуем кортеж и найдем сумму значений', sum_func2(*tup))
d = dict(a=1, b=22, c=10, d=14)
#print(sum_func2(*d)) #словарь нельзя так распаковать
print(sum_func2(**d))
